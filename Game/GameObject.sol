
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "GameObjectInt.sol";

contract GameObject is GameObjectInt {

    int public startCastleHealth = 30;
    int public startCastleAttack = 0;
    address public attackerAddress;

    struct statsOfObject{  // структура характеристик объекта
        int defenseOfObject;
        int attackOfObject;
    }

    mapping(address=>statsOfObject) stats; // связка адреса объекта с его характеристиками

    address[] public adressOfObjectArr; // массив, хранящий адреса всех созданных объектов 


    modifier onlyOwner {
        require(tvm.pubkey() != 0 && tvm.pubkey() == msg.pubkey());
        tvm.accept();
        _;
    }

    function getDefense (address gameObjectAddress) virtual external  onlyOwner returns(int) {
        return stats[gameObjectAddress].defenseOfObject;
    }
    //ДОПИСАТЬ
    function takeAttack(address gameObjectAddress) external override {
        attackerAddress = msg.sender;
        stats[gameObjectAddress].defenseOfObject -= stats[attackerAddress].attackOfObject;
        if (checkAlive(gameObjectAddress) == false) deathHandling(gameObjectAddress);
    }

    function checkAlive(address gameObjectAddress) private onlyOwner view returns (bool objectAlive)  {
        if (stats[gameObjectAddress].defenseOfObject > 0) objectAlive = true;
    }

    function deathHandling(address gameObjectAddress) virtual internal onlyOwner returns (string deathStatus) {
        if (stats[gameObjectAddress].defenseOfObject <= 0) {
            moneyTransferToWinner(gameObjectAddress);
            deathStatus = "Объект пал в битве. Все его богатства были захвачены противником.";
        } else deathStatus = "Объект пока еще в порядке и не потерял свои сокровища.";
    }

    function moneyTransferToWinner(address gameObjectAddress) virtual internal pure onlyOwner {
        gameObjectAddress.transfer(1, true, 160);
    }
}
