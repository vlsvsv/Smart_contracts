
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;
import "GameObject.sol";

contract Castle is GameObject {

    address public castleAddress = address(this);
    
    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        stats[castleAddress] = statsOfObject(startCastleHealth,startCastleAttack);
        adressOfObjectArr.push(castleAddress);
    }

    function getDefense(address gameObjectAddress) virtual external override onlyOwner returns(int)  {
        return stats[castleAddress].defenseOfObject;
        return stats[castleAddress].attackOfObject;
    }

    
    function addUnit(address gameObjectAddress) public {
        adressOfObjectArr.push(gameObjectAddress);
        stats[castleAddress] = statsOfObject(startCastleHealth + stats[gameObjectAddress].defenseOfObject, startCastleAttack + stats[gameObjectAddress].attackOfObject);
    }


    function deleteUnit(address gameObjectAddress) virtual public onlyOwner {
        stats[castleAddress] = statsOfObject(startCastleHealth - stats[gameObjectAddress].defenseOfObject, startCastleAttack - stats[gameObjectAddress].attackOfObject);
        delete stats[gameObjectAddress];
    }


    function listOfUnits() public returns(address[]){
        return adressOfObjectArr;
    }


    function deathHandling(address gameObjectAddress) internal  override onlyOwner returns (string deathStatus){

    }
}
