
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

contract MyToken {

    struct TokenCars {
        string carModel;
        string color;
        string typeOfEngine; 
        uint horsepower;   
    }
    
    TokenCars[] tokensArr;
    mapping (uint=>uint) tokenToOwner;

    modifier checkUniqOfCarModel {
        _;
        string tokenCarModel = tokensArr[tokensArr.length - 1].carModel;
        for (uint i = 0; i < tokensArr.length - 1; i++) {
            if (tokensArr[i].carModel == tokenCarModel) revert (122, "Such a car model already exists.");
        } 
    }
    
    function createToken(string carModel, string color, string typeOfEngine, uint horsepower) public checkUniqOfCarModel {
        tvm.accept();
        tokensArr.push(TokenCars(carModel, color, typeOfEngine, horsepower));
        uint keyAsLastNum = tokensArr.length - 1;
        tokenToOwner[keyAsLastNum] = msg.pubkey();
    }

    function getTokenInfo(uint tokenID) public view returns (string tokenCarName, string tokenCarColor, string tokenCarTypeOfEngine, uint tokenCarHorsepower) {
        tvm.accept();
        tokenCarName = tokensArr[tokenID].carModel;
        tokenCarColor = tokensArr[tokenID].color;
        tokenCarTypeOfEngine = tokensArr[tokenID].typeOfEngine;
        tokenCarHorsepower = tokensArr[tokenID].horsepower;
    }

    function getTokenOwner(uint tokenID) public view returns (uint) {
        tvm.accept();
        return tokenToOwner[tokenID];
    }

    mapping (uint=>uint) tokenToPrice;

    function setTokenPrice(uint tokenID, uint value) public {
        tvm.accept();
        require(msg.pubkey() == tokenToOwner[tokenID], 101);
        tokenToPrice[tokenID] = value;
    }

    function getTokenPrice(uint tokenID) public view returns (uint) {
        tvm.accept();
        if (tokenToPrice[tokenID] <= 0) revert(404, "A token with such ID doesn't exist, or it doesn't have a price set.");
        else return tokenToPrice[tokenID];
    }

    function changeOwner(uint tokenID, uint pubkeyOfNewOwner) public {
        require(msg.pubkey() == tokenToOwner[tokenID], 101);
        tvm.accept();
        tokenToOwner[tokenID] = pubkeyOfNewOwner;
    }

    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }

    
}
